log.info("Mobile Check Init");
//RegEx function to check if the client is a mobilephone browser
window.mobilecheck = function() {
  var check = false;
  (function(a){if(/(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows ce|xda|xiino/i.test(a)||/1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i.test(a.substr(0,4))){check = true;}})(navigator.userAgent||navigator.vendor||window.opera);
  return check;
};
//RegEx function to check if the client is a mobilephone/tablet browser
window.mobileAndTabletcheck = function() {
  var check = false;
  (function(a){if(/(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows ce|xda|xiino|android|ipad|playbook|silk/i.test(a)||/1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i.test(a.substr(0,4))){check = true;}})(navigator.userAgent||navigator.vendor||window.opera);
  return check;
};;
(function() {
  log.info("Header Search Init");

  angular.module("GlobalSearch", ['ngSanitize','ui.select','akn.filters']);

  globalSearchCtrl.$inject = ['$scope'];

  angular.module("GlobalSearch")
    .controller('globalSearchCtrl', globalSearchCtrl)

  function globalSearchCtrl($scope) {
    log.info("Under globalSearchCtrl");
    $scope.isMobile =  window.mobileAndTabletcheck();
    $scope.sortBymatchPos = function(predicate) {
      return function(item) {
        var patt = new RegExp(predicate,'gi');
        var match =patt.exec(item.display);
        if(match){
          return match.index;
        }
      };
    }
    var all_products = Drupal.settings.all_products;
    all_products.unshift({
      "display": Drupal.settings.l10n_all_products,
      "list_name": "",
      "list_code": ""
    });
    $scope.productList = all_products;
    $scope.product = {
      'selected': $scope.productList[0]
    };
    $scope.resetdropdownScrollTop=function(){
      jQuery('.ui-select-choices-content').scrollTop(0);
    }
    $scope.placeholder=function(modelobj,defaultText){
      if(modelobj.open){
        return "";
      }else{
        return defaultText;
      }
    }
    var stored_product=angular.fromJson(localStorage.getItem("globalSearchProduct"));
    log.info("stored_product", localStorage.getItem("globalSearchProduct"));
    if(stored_product != null && stored_product.list_name !== undefined && stored_product.list_name !== ""){
      retProdSel = all_products.filter(function(o){return o.list_name === stored_product.list_name})[0];
      jQuery("input[name=tempSearchProdSelected]").val(JSON.stringify(retProdSel));
      $scope.product = {
        'selected': retProdSel
      };
    }

    $scope.setGlobalSearchProduct = function() {
      log.info("setGlobalSearchProduct");
      localStorage.setItem("globalSearchProduct", angular.toJson($scope.product.selected));
      jQuery("input[name=tempSearchProdSelected]").val(JSON.stringify($scope.product.selected));
      if($scope.product.selected.display == 'All content'){
        jQuery("input[name=search]").attr("placeholder", jQuery("#edit-search").data('placeholder'));
      }else{
        jQuery("input[name=search]").attr("placeholder", jQuery("#edit-search").data('placeholder') + ' ' + $scope.product.selected.display);
      }
      setTimeout(function() {
        jQuery('input[name="search"]').focus();
      }, 100);

      // GTM event varaible and call
      var eventTrackingObject = {
        "event": 'searchDropdown',
        "dropdownType": 'Product',
        "dropdownValue": $scope.product.selected.list_code ? $scope.product.selected.list_code : 'All content'
      }
      GA_AKP.dataLayerSend(eventTrackingObject);
    };
  }
})();

function resetGlobalHeaderSel() {
  localStorage.removeItem('globalSearchProduct');
  jQuery("#edit-search").attr("placeholder", jQuery("#edit-search").data('placeholder'));
  jQuery("input[name=tempSearchProdSelected]").val('');
  var appElement = document.querySelector('[ng-app=GlobalSearch]');
  var $scope = angular.element(appElement).scope();
  if (typeof $scope != 'undefined') {
    $scope.$apply(function() {
      $scope.product = {'selected': $scope.productList[0]};
      log.info("resetGlobalHeaderSel");
    });
  }
}

function refreshGlobalHeaderSel(product) {
  var appElement = document.querySelector('[ng-app=GlobalSearch]');
  var $scope = angular.element(appElement).scope();
  if (typeof $scope != 'undefined' && product !==undefined && product !==null) {
    var headerProduct=jQuery.grep($scope.productList, function(e){ return e.list_code == product.facetValue; });
    var tmpProdStr=angular.toJson(headerProduct[0]);

    var parseGlobalSearchProduct = JSON.parse(localStorage.getItem("globalSearchProduct"))
    if(parseGlobalSearchProduct !== null) {
      if(parseGlobalSearchProduct.hasOwnProperty('prefiltered')){
        var newTmpProdStr = JSON.parse(tmpProdStr);
        newTmpProdStr['prefiltered'] = JSON.parse(localStorage.getItem("globalSearchProduct"))['prefiltered'];
        tmpProdStr = JSON.stringify(newTmpProdStr);
      }
    }

    localStorage.setItem('globalSearchProduct', tmpProdStr);
    jQuery("input[name=tempSearchProdSelected]").val(tmpProdStr);
    if(headerProduct.length>0){
      sessionStorage.setItem('pCode',headerProduct[0].list_code);
      sessionStorage.setItem('pName',headerProduct[0].list_name);
      $scope.$apply(function() {
        $scope.product = {'selected':headerProduct[0]};
        log.info("refreshGlobalHeaderSel");
      });
      jQuery("input[name=search]").attr("placeholder", jQuery("#edit-search").data('placeholder') + ' ' + $scope.product.selected.display);
    }

  }
}

function refreshGlobalProductFromLocalStorage() {
  var appElement = document.querySelector('[ng-app=GlobalSearch]');
  var $scope = angular.element(appElement).scope();
  var globalProdStr=localStorage.getItem('globalSearchProduct');
  var globalProduct=angular.fromJson(globalProdStr);
  if (typeof $scope != 'undefined' && globalProduct !==undefined && globalProduct !==null && globalProduct.list_code !== undefined) {
    jQuery("input[name=tempSearchProdSelected]").val(globalProdStr);
    var headerProduct=jQuery.grep($scope.productList, function(e){ return e.list_code == globalProduct.list_code; });
    if(headerProduct.length>0){
      $scope.$apply(function() {
        $scope.product = {'selected':headerProduct[0]};
        log.info("refreshGlobalProductFromLocalStorage");
      });
    }
  }
}
;
function autodeskFacetedSearchValidateUserInput(form){
  var field_id = autodeskFacetSearchGetFieldId(form.elements);
  var userinput = form[field_id].value;

  if (userinput == null || userinput == "") {
      return false;
  }
  var trimuserinput = userinput.replace(/^\s+|\s+$/g,"");
  if (trimuserinput == null || trimuserinput == "") {
      return false;
  }

  // validated - set product if available
  var tmpProdStr = jQuery("input[name=tempSearchProdSelected]").val();
  if(typeof tmpProdStr != "undefined" && tmpProdStr.length
      && localStorage.getItem("globalSearchProduct") != tmpProdStr) {

        if(JSON.parse(localStorage.getItem("globalSearchProduct")).hasOwnProperty('prefiltered')){
          var newTmpProdStr = JSON.parse(tmpProdStr);
          newTmpProdStr['prefiltered'] = JSON.parse(localStorage.getItem("globalSearchProduct"))['prefiltered'];
          tmpProdStr = JSON.stringify(newTmpProdStr);
        }

    localStorage.setItem('globalSearchProduct', tmpProdStr);
    var p=JSON.parse(tmpProdStr);
    if(p.length >0 ){
      sessionStorage.setItem('pCode',p.list_code);
      sessionStorage.setItem('pName',p.list_name);
    }
  }

  if(p == undefined){
    var p = {list_code:''};
  }
  // GTM event varaible and call
  var eventTrackingObject = {
    "event": 'siteSearch',
    "searchKeyword": userinput,
    "prefilteredSearch": p.list_code ? 'Prefiltered' : 'Non Prefiltered',
    "prefilteredValue": p.list_code  ? p.list_code : null
  }
  GA_AKP.dataLayerSend(eventTrackingObject);
}

function autodeskFacetSearchGetFieldId(elements){
  for (var i = 0; i < elements.length; i++) {
    for (var j = 0; j < elements[i].attributes.length; j++) {
      if (elements[i].attributes[j].name == 'name') {
        if (elements[i].attributes[j].value == 'search') {
          for (var k = 0; k < elements[i].attributes.length; k++) {
            if (elements[i].attributes[k].name == 'id') {
              return elements[i].attributes[k].value;
            }
          }
        }
      }
    }
  }
  return "";
}

jQuery("#autodesk-faceted-search-widget-form").submit(function(event){
  event.preventDefault();
  var field_id = autodeskFacetSearchGetFieldId(this.elements);
  var userInput = this[field_id].value;

  if (userInput == null || userInput == "") {
    return false;
  }

  var originalInput = encodeURIComponent(userInput.replace(/^\s+|\s+$/g,""));
  if (originalInput == null || originalInput == "") {
    return false;
  }

  var searchValue = originalInput,
      url = null;

  searchValue = searchValue.replace(/\s+/g," ");
  searchValue = searchValue.trim();
  searchValue = searchValue.toLowerCase(searchValue);

  var decodedSearchValue = decodeURIComponent(searchValue).toLowerCase();
  var i10nProductNameMapping={"автокад":"autocad", "инвентор":"inventor", "ревит":"revit", "нависворкс":"navisworks", "молдфлоу":"moldflow insight", "волт":"vault", "3d max":"3ds max", "3д макс":"3ds max", "майя":"maya", "алиас":"alias", "элиас":"alias"};
  if(i10nProductNameMapping[decodedSearchValue] !== undefined){
    searchValue=i10nProductNameMapping[decodedSearchValue] ; //Map the Cyrillic version of the product names to product landing pages for AKN Search
  }

  var path_prefix = '';

  if (typeof Drupal.settings.l10n.language !== 'undefined' && Drupal.settings.l10n.language !== 'en') {
    path_prefix = '/' + Drupal.settings.l10n.language;
  }

  url = autodeskFacetedSearchGetMappedUrl(searchValue);
  if (url !== null) {
    window.location.href = "//" + window.location.hostname + path_prefix + '/' + url;
    return false;
  }

  url = autodeskFacetedSearchGetProductPageUrl(searchValue);
  if (url !== null) {
    //no leading slash req'd
    // already localized, no path prefix req'd
    window.location.href = "//" + window.location.hostname + url;
    return false;
  }

  //product specific system requirements
  url = autodeskFacetedSearchGetProductSysReqPageUrl(searchValue,path_prefix);
  if (url !== null) {
    //no leading slash req'd
    // already localized, no path prefix req'd
    window.location.href = "//" + window.location.hostname + url;
    return false;
  }


  if (url === null) {

    // check if search orginated from all producsts
    var hasProd = localStorage.getItem('globalSearchProduct');
    var prod_param = "";
    if (hasProd !== null) {
      var retProdSelected = JSON.parse(hasProd);
      if (retProdSelected !== null && retProdSelected.list_code != null && retProdSelected.list_code !== undefined && retProdSelected.list_code.length !== 0) {
        prod_param = "&p="+retProdSelected.list_code+"&sort=score";
      }
    }

    window.location.href = "//" + window.location.hostname + path_prefix + "/search?search=" + originalInput + prod_param;
    return false;
  }
});

function autodeskFacetedSearchGetMappedUrl(searchValue) {
  searchValue = decodeURIComponent(searchValue).toLowerCase();
  switch (searchValue) {
    case 'robot structural analysis':
      searchValue = searchValue.replaceAllInString(' ', '-');
    case 'alias':
    case 'flame':
    case 'inventor':
    case 'navisworks':
    case 'revit':
    case 'sketchbook':
    case 'vault':
    case 'vred':
      return "support/" + searchValue + "-products";
      break;
    case 'installation & licensing':
    case 'installation and licensing':
      return 'customer-service/installation-activation-licensing';
      break;
    case 'network license administration':
      return 'network-license-administration';
      break;
    case 'contactus':
    case 'contact us':
      return 'contact-support';
      break;
    default:
      break;
  }
  return null;
}

function autodeskFacetedSearchGetProductPageUrl(productName) {
  productName = decodeURIComponent(productName).toLowerCase();
  var productUrls = Drupal.settings.autodesk_faceted_search.product_urls;
  if (typeof productUrls !== 'undefined' && productName in productUrls) {
    return productUrls[productName];
  }
  return null;
}

function autodeskFacetedSearchGetProductSysReqPageUrl(searchValue, path_prefix) {
 var serachTerm=decodeURIComponent(searchValue).toLowerCase();
  if (serachTerm === 'system requirements' || serachTerm === Drupal.settings.autodesk_faceted_search.sys_req_search_term){
    var  productName = "";
    var hasProd = localStorage.getItem('globalSearchProduct');
    if (hasProd !== null) {
      var retProdSelected = JSON.parse(hasProd);
      if (retProdSelected !== null && retProdSelected.display != null && retProdSelected.display !== undefined && retProdSelected.display.length !== 0) {
        productName = decodeURIComponent(retProdSelected.display
            ).toLowerCase();
      }
    }

    var productSysReqUrls = Drupal.settings.autodesk_faceted_search.prod_sys_req_urls;
    if (typeof productSysReqUrls !== 'undefined' && productName in productSysReqUrls) {
      return productSysReqUrls[productName];
    }
    return path_prefix +'/support/system-requirements';
  }

  return null;
}

String.prototype.replaceAllInString = function(search, replacement) {
  var target = this;
  return target.replace(new RegExp(search, 'g'), replacement);
};
;
